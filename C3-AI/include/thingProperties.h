// Code generated by Arduino IoT Cloud, DO NOT EDIT.

// #include <string.h>
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include "arduino_secrets.h"
// #include "WiFiConnectionHandler.h"

const char DEVICE_LOGIN_NAME[]  = "9b40769f-0487-4897-84e7-804c04a483b7";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_OPTIONAL_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]         = SECRET_DEVICE_KEY;    // Secret device password

#if defined(BOARD_HAS_SECRET_KEY)
  #define BOARD_ID "31ae9336-9e57-4bee-9d96-970cfb5840b6"
#endif




/******************************************************************************
   GLOBAL CONSTANTS
 ******************************************************************************/

int   const MIN_DELTA_INT_PROPERTY   = 5;
float const MIN_DELTA_FLOAT_PROPERTY = 10.0f;

/******************************************************************************
   GLOBAL VARIABLES
 ******************************************************************************/
float temperature;
float humidity;
float pressure;
float altitude;
float gasResistance;
float lDR;
float hG;
int ml = 0;
float minHumidity = 0;


#if defined(BOARD_HAS_WIFI)
  WiFiConnectionHandler ArduinoIoTPreferredConnection(SECRET_SSID, SECRET_OPTIONAL_PASS);
#elif defined(BOARD_HAS_GSM)
  GSMConnectionHandler ArduinoIoTPreferredConnection(SECRET_PIN, SECRET_APN, SECRET_LOGIN, SECRET_PASS);
#elif defined(BOARD_HAS_LORA)
  LoRaConnectionHandler ArduinoIoTPreferredConnection(SECRET_APP_EUI, SECRET_APP_KEY, EU868);
#elif defined(BOARD_HAS_NB)
  NBConnectionHandler ArduinoIoTPreferredConnection(SECRET_PIN, SECRET_APN, SECRET_LOGIN, SECRET_PASS);
#elif defined(BOARD_HAS_CATM1_NBIOT)
  CatM1ConnectionHandler ArduinoIoTPreferredConnection(SECRET_PIN, SECRET_APN, SECRET_LOGIN, SECRET_PASS);
#elif defined(BOARD_HAS_ETHERNET)
  /* DHCP mode */
  //EthernetConnectionHandler ArduinoIoTPreferredConnection;
  /* Manual mode. It will fallback in DHCP mode if SECRET_OPTIONAL_IP is invalid or equal to "0.0.0.0" */
  EthernetConnectionHandler ArduinoIoTPreferredConnection(SECRET_OPTIONAL_IP, SECRET_OPTIONAL_DNS, SECRET_OPTIONAL_GATEWAY, SECRET_OPTIONAL_NETMASK);
#elif defined(BOARD_HAS_CELLULAR)
  CellularConnectionHandler ArduinoIoTPreferredConnection(SECRET_PIN, SECRET_APN, SECRET_LOGIN, SECRET_PASS);
#endif

/******************************************************************************
   PROTOTYPES
 ******************************************************************************/

void onMlChange();

/******************************************************************************
   FUNCTIONS
 ******************************************************************************/
#if defined(HAS_TCP)
void initProperties() {
#if defined(BOARD_HAS_SECRET_KEY)
  ArduinoCloud.setBoardId(BOARD_ID);
  ArduinoCloud.setSecretDeviceKey(SECRET_DEVICE_KEY);
#endif

  ArduinoCloud.addProperty(temperature, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(humidity, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(pressure, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(altitude, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(gasResistance, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(lDR, READ, 10 * SECONDS, NULL);
  ArduinoCloud.addProperty(hG, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(ml, READWRITE, 1 * SECONDS, onMlChange);
  ArduinoCloud.addProperty(minHumidity, READWRITE, 1 * SECONDS, NULL);
}
#endif
